# This is an **example** API to demonstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

openapi: 3.0.2
info:
  version: '1.0.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI requires the version to be a string, but without quotation marks YAML can recognize it as a number.
  
  title: weatherboard.api.kols.dk # Replace with your API title
  # Keep it simple. Don't add "API" or version at the end of the string.

  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
  
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is an **example** API to demonstrate features of OpenAPI specification
    # Introduction
    This API definition is intended to to be a good starting point for describing your API in 
    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).
    It also demonstrates features of [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and 
    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond the standard OpenAPI syntax we use a few 
    [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).

    # OpenAPI Specification
    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: 'https://github.com/Rebilly/generator-openapi-repo'

# A list of tags used by the definition with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Forecast
    description: Forecasts
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/': # path parameter in curly braces

    # parameters list that are used with each operation for this path
    parameters:
      - name: latitude
        in: query
        description: Latitude of location
        required: true
        schema:
          type: string
      - name: longitude
        in: query
        description: Longitude of location
        required: true
        schema:
          type: string
      - name: timezone
        in: query
        description: Timezone to show results in
        required: true
        schema:
          type: string
    get: # documentation for GET operation for this path
      tags:
        - Forecast
      
      # summary is up to 120 symbold but we recommend to be shortest as possible
      summary: Get forecast image based on location
      
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      
      # operationId should be unique across the whole specification
      operationId: getForecastImage
      
      # security schemas applied to this operation
      security:
        - api_key: []
      responses: # list of responses
        '200':
          description: Success
          content:
            image/png: # operation response mime type
              schema: # response schema can be specified for each response
                type: string
                format: binary
        '400':
          description: Invalid parameters supplied
        '401':
          description: Unauthorized
        
# An object to hold reusable parts that can be used across the definition
components:
  # Security scheme definitions that can be used across the definition.
  securitySchemes:
    api_key:  # security definition name (you can name it as you want)
      type: apiKey 
      # The following options are specific to apiKey type
      in: header # Where API key will be passed: header or query
      name: x-api-key # API key parameter name
